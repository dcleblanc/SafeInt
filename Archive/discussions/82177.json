[
  {
    "Id": "282340",
    "ThreadId": "82177",
    "Html": "<p>Hi Guys,</p>\r\n<p>I am getting many compile errors when using SafeInt with a double type, SafeInt&lt;double&gt; d(0.0)</p>\r\n<p>Is SafeInt not designed to work with doubles/floats? Looking at the code it seems to handle conversions to and from doubles but I can not construct one using a double.</p>\r\n<p>I am using 3.0.12p</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;Glenn</p>",
    "PostedDate": "2010-01-27T06:54:17.837-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "282492",
    "ThreadId": "82177",
    "Html": "<p>By design. It's Safe_Int_, not Safe_Float_. The compiler error you get should have pointed you to the class at the top of the file where we sort out what types you can make a SafeInt out of, in particular:</p>\r\n<p><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">template</span></span><span style=\"font-size:x-small\">&lt;&gt; </span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">class</span></span><span style=\"font-size:x-small\"> NumericType&lt;</span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">double</span></span><span style=\"font-size:x-small\">&gt; { </span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">public</span></span><span style=\"font-size:x-small\">: </span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">enum</span></span><span style=\"font-size:x-small\">{ isBool = </span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">false</span></span><span style=\"font-size:x-small\">, isFloat = </span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">true</span></span><span style=\"font-size:x-small\">, <strong><span style=\"color:#ff0000\">isInt = </span></strong></span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#ff0000\"><strong>false</strong></span></span><span style=\"font-size:x-small\"><strong><span style=\"color:#ff0000\"> </span></strong>}; };</span></p>\r\n<p>I've thought about making a SafeFloat, but floating point operations have entirely different classes of problems - mainly truncation. It is seriously non-trivial to detect this, and it is situational - the right answer isn't all that clear-cut. I could do something like warn you that an operation had no effect, like adding a very large number to a small number, but for some code, that could be by design.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-01-27T13:31:53.783-08:00",
    "UserRole": "Coordinator",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "282643",
    "ThreadId": "82177",
    "Html": "<p>Hi David,</p>\r\n<p>Thanks for providing this library, it is well thought out and very useful.</p>\r\n<p>I did see that and can understand the issues around floating point math. I do have one concern regarding division. As you do support division how can we get accurate results without fully supporting doubles, 3 / 2 results in a double which is rounded, that to me is not ideal.</p>\r\n<p>Again, I think SafeInt is a very useful library I am just wondering about it's use in this case.</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;Glenn</p>",
    "PostedDate": "2010-01-28T00:46:27.303-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "282958",
    "ThreadId": "82177",
    "Html": "<p>In the C/C++ standard, integer division is a different animal than floating point, and it isn't as if someone wrote this:</p>\r\n<p>int x, y, z;</p>\r\n<p>x = (int)((float)y/(float(z));</p>\r\n<p>It does the integer division directly, as can be seen from looking at the assembly. As to accuracy, it depends on what you're doing - for example:</p>\r\n<p>(a * b) / c ?= (a / c) * b</p>\r\n<p>This could be true or false, depending. In general, you want to do it like the left hand side. If you wanted to always round up, which is non-standard behavior, then you'd do something like</p>\r\n<p>x = (int)ceil((double)y/(double)z);</p>",
    "PostedDate": "2010-01-28T13:46:09.773-08:00",
    "UserRole": "Coordinator",
    "MarkedAsAnswerDate": null
  }
]