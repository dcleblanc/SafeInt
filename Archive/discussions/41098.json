[
  {
    "Id": "136282",
    "ThreadId": "41098",
    "Html": "As I was adding the compile tests, I hit upon the various ways to get a pointer or a reference to the base member. Here's the problem - functions with a signature like this:<br>\r\n<br>\r\nBOOL ReadFile(HANDLE hFile, BYTE* pBuf, DWORD cbBuf, DWORD* pcbRead)<br>\r\n<br>\r\nare quite common. If you have overloaded operator &amp;, this goes easily. What this unfortunately implies is that a function like so:<br>\r\n<br>\r\nvoid Foo(SafeInt&lt;T&gt;* pSi)<br>\r\n<br>\r\nCannot possibly work, as you can't actually get a pointer to the object without some heroic casting. IMHO, this isn't a bad problem, as the right way to write the function is:<br>\r\n<br>\r\nvoid Foo(SafeInt&lt;T&gt;&amp; rSi)<br>\r\n<br>\r\nWhich does work, uses nice C++ constructs, and not icky C constructs. However, we've still got a bunch of issues - a non-trivial problem is that you cannot do this:<br>\r\n<br>\r\nset&lt; SafeInt&lt;int&gt; &gt; safeint_set;<br>\r\n<br>\r\nThis is not good - while it may be extremely unusual to want to make STL containers full of SafeInts, it would be very bad to preclude that possibility. It is also bad to break existing code by removing the operator&amp;. What we have done in the Visual Studio version is to remove the operator &amp; overload, and break backwards compatability. I'm thinking that maybe the right thing to do for this version is to make this a conditional compile.<br>\r\n<br>\r\nThoughts?\r\n",
    "PostedDate": "2008-11-29T13:55:28.537-08:00",
    "UserRole": "Coordinator",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136752",
    "ThreadId": "41098",
    "Html": "Hi David,<br>\r\n<br>\r\nI tend to think that it might be preferable for SafeInt <em><strong>not</strong></em> to have those <span>operator&amp; </span>overloads. Because people rarely overload <span>operator&amp;, so they might be surprised.</span> I do think that there are relevant use cases, passing a SafeInt by pointer, as a function argument. Typically because the argument could be a NULL pointer, to denote that its value is &quot;unspecified&quot;, or &quot;irrelevant&quot;.  Which might be different from passing the SafeInt value zero.<br>\r\n<br>\r\nI think that the <span>operator&amp; </span>overloads would make it a little bit too easy for users to accidentally leave the SafeInt world, and enter the Unsafe zone. Why shouldn't people just use SafeInt::Ptr()?<br>\r\n<br>\r\nAnyway, can you please clarify the safeint_set issue to me?  Are you saying that set&lt; SafeInt&lt;int&gt; &gt; doesn't compile when SafeInt has those <span>operator&amp; overloads?  I haven't been able to reproduce this issue so far (using MSVC 9).</span>\r\n",
    "PostedDate": "2008-12-01T14:42:49.853-08:00",
    "UserRole": "Developer",
    "MarkedAsAnswerDate": null
  }
]