{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "These should all be addressed in 3.0.12p",
    "ClosedDate": "2008-11-23T14:17:05.71-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi David!\n \nI'm glad to see that SafeInt is back again!  Actually I made a few changes to my local copy, in order to improve its conformance to the C++ Standard. Please consider merging them into the official version. I made the following changes:\n \n * Removed template magic from IsFloat, because it's non-Standard (sorry).\nYour version depends on __is_enum, which is a Microsoft compiler extension, and it uses ( (T)( (float)1.1 ) > (T)1 ) as if it's an \"integral constant expression\" (ICE), which is also non-standard at the moment...\n \n * Replaced C_ASSERT(false) by C_ASSERT(sizeof(T) == 0), because C_ASSERT(false) might yield compile errors before template instantiation.\nSee also: Boost.StaticAssert, \"Use in templates\", by Steve Cleary and John Maddock\nhttp://www.boost.org/doc/html/boost_staticassert.html#boost_staticassert.templates\n \n * Removed (unsigned __int64) cast from tmp argument, to avoid passing an unnamed temporary object (rvalue) by reference to RegMultiply.\nDavid, please double-check: (unsigned __int64)tmp might have been a bug! And if it isn't a bug, I might have introduced one! \n \n * Added template keywords (\"::template\") to dependent member-names.\nSee also Comeau C++ Template FAQ, \"What is the ->template, .template and ::template syntax about?\"\nhttp://www.comeaucomputing.com/techtalk/templates/#templateprefix\n \n * Replaced _int64 by __int64, in Addition. (Mind the underscores!)\nJust a typo, I assume!\n \nThe issues were found with help from g++-4 (GCC) 4.3.2, running on cygwin. But note: these issues are not GCC-specific! Hereby attached my modified version of 3.0.11p",
    "LastUpdatedDate": "2013-05-16T01:03:32.11-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "SafeInt",
    "ReportedDate": "2008-11-02T04:23:30.15-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Five changes to improve C++ Standard conformance",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 6534
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "David mailed me that the (unsigned __int64)tmp cast isn't really a bug, (Although \"officially\" it isn't allowed to pass the result of this cast as non-const reference to a function, according to the current C++ Standard.  Because the result is an \"rvalue\".)  Apparently casting tmp to its own type doesn't have the effect of creating a temporary copy of tmp, in this particular case (using MSVC).  Still it would be preferable to just remove this specific cast.",
      "PostedDate": "2008-11-13T02:57:17.877-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-21T11:58:19.993-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-21T11:58:20.6-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I zapped the file - I cannot take code changes directly from people external to Microsoft. I need these reported as bug reports. As we've discussed in e-mail, these are all good changes, and I'll be providing fixes ASAP. This effort will be a little easier once I get Linux running on my home network again (I've usually kept a Linux box around since 1993), and will have gcc to test against.\r\n\r\nGetting this running against gcc will be a very good thing, as we do a lot of MacOS development at Microsoft (MacOffice being the #1 example), and I'd like it if everyone writing code for all platforms could use this library. When I first checked this years ago, gcc didn't have decent template support, and this was impossible. It seems this is greatly improved, and we can get this going, which is very cool.",
      "PostedDate": "2008-11-21T12:05:20.18-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Let me clarify this a bit - on the Microsoft compiler, casting a base integral type to itself, and then passing it as a reference doesn't cause a run-time problem. On stricter compilers, it could cause a problem, and casting a complex type to itself will cause the temporary copy to get passed in, which isn't what you'd normally want out of a reference. Thus this is not a run-time bug on the currently supported compiler, but it is a bug in that it isn't proper code, and could misbehave on other compilers. IMHO, our compiler ought to at least warn you about this, which I'm addressing with the Visual Studio team. Because it is an actual bug (and part of the work needed to support gcc), this will be fixed.",
      "PostedDate": "2008-11-21T12:11:17.43-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Thanks, David. I'm glad you agree that that particular (unsigned __int64)tmp cast should be removed.  Note that MSVC does not accept passing the result of a cast by non-const reference, when you disable language extensions (\"/Za\").  When language extensions are disabled, the cast will actually create a temporary copy  As I mentioned at the newsgroup discussion, \"Does cast to its own type create a temporary copy?\", http://groups.google.com/group/comp.lang.c++.moderated/browse_thread/thread/c81f3ee9095a8f44",
      "PostedDate": "2008-11-22T04:29:11.703-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Additionally, gcc on Linux is considerably more grumpy about things - seems __declspec(noreturn) is Microsoft specific, which I don't think the cygwin version picked up on. I made a SafeIntGcc.hpp that we can use to manage differences, changed the exception handler declaration based on whether this include has been seen first.",
      "PostedDate": "2008-11-23T12:50:12.023-08:00",
      "Id": -2147483648
    },
    {
      "Message": "An additional gotcha I need to record so I can back port it - in isLikeSigned, gcc complains that we're comparing two anonymous enums, and the fix is to cast both to bool.",
      "PostedDate": "2008-11-23T13:52:27.647-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-23T14:17:05.71-08:00",
      "Id": -2147483648
    },
    {
      "Message": "David wrote: \"in isLikeSigned, gcc complains that we're comparing two anonymous enums, and the fix is to cast both to bool\"\r\n\r\nIt's only just a warning, isn't it?  If so, I think it's entirely safe to ignore it in this case. Or possibly just disable the warning, or use a workaround, as you did. In general, it might make sense to provide a warning when comparing two different enum constants. For example, the following example gets me a similar warning:\r\n////////////////////////////////////////\r\nclass Judgement\r\n{\r\npublic:\r\n  enum { RIGHT, WRONG };\r\n};\r\n\r\nclass Direction\r\n{\r\npublic:\r\n  enum { LEFT, RIGHT };\r\n};\r\n\r\nint main()\r\n{\r\n  // warning: comparison between 'enum Judgement::<anonymous>'\r\n  // and 'enum Direction::<anonymous>'\r\n return Judgement::RIGHT == Direction::RIGHT;\r\n}\r\n////////////////////////////////////////\r\n\r\nBut in this example, the warning looks quite useful to me, as it may not be semantically correct to compare Judgement::RIGHT and Direction::RIGHT.",
      "PostedDate": "2008-11-30T13:59:53.827-08:00",
      "Id": -2147483648
    },
    {
      "Message": "It turned out there were 3 of these - all removed. None of them had any real effect.\r\n\r\nThere's also some stuff that I don't think is because gcc is pickier about the standard. For example, the Align() method took an integer template argument of bits to force this to be a compile-time constant. Microsoft compiler is happy with that. OTOH, gcc is not, and I had to make an enum, change the template argument to the enum, and now it works. At any rate, the issue has been worked around, and is OK now. I am curious just how one would pass a template argument that's an integer type and use gcc if you really needed arbitrary integers. It would be interesting to know what the standard has to say about this.",
      "PostedDate": "2008-11-30T22:44:34.93-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Oh - as to your comment about the enums, the standard says that an enum must be an integral type, preferably an int. So I think the right thing for the compiler to do is cast both of the anonymous enums to an int. There weren't many of these, and casting to either int or bool as appopriate made the warnings go away.\r\n\r\nBTW, how does one selectively ignore gcc warnings? Is there some analogue to #pragma warning(disable:xxxx) ? I had a fun time working around a place I'd just suppressed a warning for Visual Studio. Hopefully, there is some less barbaric alternative than passing the output through a perl script, or disabling that entire class of warning for the whole project.",
      "PostedDate": "2008-12-01T18:46:53.88-08:00",
      "Id": -2147483648
    },
    {
      "Message": "GCC version 4.2 or higher allows warnings to be disabled by a pragma.  For example, the following would disable \"warning: unused variable 'fooBar'\":\r\n\r\n#ifdef __GNUC__\r\n#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 1)\r\n// GCC version 4.2 or higher:\r\n#pragma GCC diagnostic ignored \"-Wunused-variable\"\r\n#endif\r\n#endif\r\nSee: \r\nhttp://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html\r\nhttp://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\r\n\r\nUnfortunately it doesn't seem to offer push/pop for warnings. It doesn't seem to disable the enum warning either (\"-Wenum-compare\").  But luckily you've worked around that one already.",
      "PostedDate": "2008-12-03T08:44:23.42-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Thanks - that will allow us to raise the warning level. I also got Michael Howard to try compiling on a Mac, and it has all sorts of interesting errors - seems they're behind on the gcc version. Also nice to know what the right #ifdef to use for gcc - I'll correct that.",
      "PostedDate": "2008-12-03T10:42:59.25-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-13T18:31:05.413-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T01:03:32.11-07:00",
      "Id": -2147483648
    }
  ]
}