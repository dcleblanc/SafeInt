{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Also fixed in 3.0.12p",
    "ClosedDate": "2008-11-23T14:17:49.787-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "SafeInt version 3.0.11p provides conversion operators to implicitly convert SafeInt<T> to a built-in floating point type:\n \n    operator float() const\n    operator double() const\n    operator long double() const\n \nUnfortunately I get a lot of compiler errors when trying to use them. The following example tries to convert a SafeInt<unsigned char> to a built-in floating point type: \n \n//////////////////////////////////////////////////\n  #include \"safeint3.hpp\"\n \n  int main()\n  {\n    const SafeInt<unsigned char> mySafeByte;\n    float myBuiltinFloat = mySafeByte;\n    double myBuiltinDouble = mySafeByte;\n    long double myBuiltinLongDouble = mySafeByte;\n    return 0;\n  }\n//////////////////////////////////////////////////\n \nClearly such a conversion is entirely safe. Still MSVC 9 SP1 tells me:\n \n   safeint3.hpp(648) : error C2118: negative subscript\n           safeint3.hpp(888) : see reference to class template instantiation 'IntTraits<T>' being compiled\n        with\n        [\n            T=float\n        ]\n           safeint3.hpp(5163) : see reference to class template instantiation 'GetCastMethod<ToType,FromType>' being compiled\n        with\n        [\n            ToType=float,\n            FromType=unsigned char\n        ]\n           safeint3.hpp(5161) : while compiling class template member function 'SafeInt<T>::operator float(void) const'\n        with\n        [\n            T=unsigned char\n        ]\n           safeint3test.cpp(5) : see reference to class template instantiation 'SafeInt<T>' being compiled\n        with\n        [\n            T=unsigned char\n        ]\n   safeint3.hpp(674) : error C2296: '<<' : illegal, left operand has type 'float'\n   safeint3.hpp(674) : error C2297: '<<' : illegal, right operand has type 'float'\n   safeint3.hpp(674) : error C2171: '~' : illegal on operands of type 'float'\n   safeint3.hpp(674) : error C2864: 'IntTraits<T>::maxInt' : only static const integral data members can be initialized within a class\n        with\n        [\n            T=float\n        ]\n   safeint3.hpp(675) : error C2296: '<<' : illegal, left operand has type 'float'\n   safeint3.hpp(675) : error C2297: '<<' : illegal, right operand has type 'float'\n   safeint3.hpp(675) : error C2864: 'IntTraits<T>::minInt' : only static const integral data members can be initialized within a class\n        with\n        [\n            T=float\n        ]\n   safeint3.hpp(5163) : error C2664: 'void SafeCastHelper<T,U,__formal>::CastThrow<E>(U,T &)' : cannot convert parameter 2 from 'size_t' to 'float &'\n        with\n        [\n            T=float,\n            U=unsigned char,\n            __formal=0,\n            E=CPlusPlusExceptionHandler\n        ]\n \nHope you can easily fix it.\n \nPS Thanks David, for mentioning me at the SafeInt Home page!",
    "LastUpdatedDate": "2013-05-16T01:03:31.907-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "SafeInt",
    "ReportedDate": "2008-11-23T05:59:22.977-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Implicit conversion to floating point fails to compile",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 6642
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Yes, this was an easy fix. I'm working on the compile-time test rig at the moment; it was very easy to just add in the casting tests. What I had to do to fix this was to remove the cases where ToType was a float/double/long double from the main GetCastMethod class and create specializations for each of them.\r\n\r\nI just got my Linux system running yesterday, so I should be able to test with gcc shortly.",
      "PostedDate": "2008-11-23T11:40:30.63-08:00",
      "Id": -2147483648
    },
    {
      "Message": "BTW, constructing a SafeInt from a floating type was broken, too - now fixed.",
      "PostedDate": "2008-11-23T11:57:53.363-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-23T14:17:49.787-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-13T18:31:04.997-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T01:03:31.907-07:00",
      "Id": -2147483648
    }
  ]
}