{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I've been tracking down some integer overflows in Firefox and seem to have narrowed some of them down to the SafeInt library.\n \nAs an example, the \"a = -a;\" assignment at SafeInt3.hpp:2102 is sometimes invoked while a has value INT_MIN.  Of course, negating INT_MIN is undefined behavior in C++98 and C++11.  \n \nTo reproduce, change the code like this:\n \n       if( a < 0 )\n        {\n\t  if (a==INT_MIN) printf (\"oops!\\n\");\n           a = -a;\n           fIsNegative = true;\n        }\n \nThen run MultVerify().  Here is what I get:\n \n[regehr@gamow safeint]$ g++ -O -w TestMain.cpp MultVerify.cpp  -o TestMain\n[regehr@gamow safeint]$ ./TestMain\noops!\noops!\noops!\noops!\noops!\noops!\n \nThis is 3.0.16p. There are some other overflows in SafeInt, please let me know if you are interested in bug reports about them.",
    "LastUpdatedDate": "2013-02-13T18:31:03.683-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "SafeInt",
    "ReportedDate": "2011-09-21T13:32:12.117-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "integer overflows",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 14278
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I got SafeInt to malfunction due to this undefined behavior by writing this test code:\r\n\r\nvoid test (__int32 a, __int64 b) {\r\n  __int32 ret;\r\n  bool res = SafeMultiply (a, b, ret);\r\n  if (res) {\r\n    printf (\"%d * %lld = %d\\n\", a, b, ret);\r\n  } else {\r\n    printf (\"%d * %lld = INVALID\\n\", a, b);\r\n  }\r\n}\r\n\r\nint main (void)\r\n{\r\n  test (INT_MIN, -2);\r\n  test (INT_MIN, -1);\r\n  test (INT_MIN, 0);\r\n  test (INT_MIN, 1);\r\n  test (INT_MIN, 2);\r\n  return 0;\r\n}\r\n\r\nNow, watch the answer change as the optimization options are changed:\r\n\r\nregehr@home:~/embedded_papers/john/overflow12/safeint$ current-g++ -O1 john_test.cpp ; ./a.out \r\n-2147483648 * -2 = INVALID\r\n-2147483648 * -1 = INVALID\r\n-2147483648 * 0 = 0\r\n-2147483648 * 1 = -2147483648\r\n-2147483648 * 2 = INVALID\r\nregehr@home:~/embedded_papers/john/overflow12/safeint$ current-g++ -O2 john_test.cpp ; ./a.out \r\n-2147483648 * -2 = INVALID\r\n-2147483648 * -1 = INVALID\r\n-2147483648 * 0 = 0\r\n-2147483648 * 1 = INVALID\r\n-2147483648 * 2 = INVALID\r\n\r\nThis is using today's pre-4.7 G++ snapshot on Ubuntu Linux. Behavior is consistent across x86 and x64.\r\n\r\nBasically the current version of SafeInt needs to be compiled with -fwrapv or equivalent in order to function correctly.  Of course, not all compilers support such an option.",
      "PostedDate": "2011-09-21T20:21:45.427-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Below, the full list of integer undefined behaviors seen while running *Verify.cpp.\r\n\r\nUNDEFINED at <./SafeInt3.hpp, (2102:16)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2120:25)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2148:16)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2166:25)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2252:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2258:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2269:29)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2305:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2311:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2322:25)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2356:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2367:29)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2400:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2411:25)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2448:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2465:29)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2499:17)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2505:17)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2516:25)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2565:17)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2571:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2582:29)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2629:17)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2635:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2646:25)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2679:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2690:29)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2718:18)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (2729:29)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (3798:44)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (3826:44)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (3855:36)> : Op: +, Reason : Signed Addition Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (3878:36)> : Op: +, Reason : Signed Addition Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (4539:62)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (4570:62)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (4652:27)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (4678:27)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (4782:36)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (4842:36)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (6519:43)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (6521:25)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (868:34)> : Op: -, Reason : Signed Subtraction Overflow\r\nUNDEFINED at <./SafeInt3.hpp, (878:34)> : Op: -, Reason : Signed Subtraction Overflow\r\n",
      "PostedDate": "2011-09-22T08:03:00.43-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Thanks for looking into this. I hadn't previously considered -MIN_INT to be something that a compiler would get overly ambitious about optimizing.\r\n\r\nAt the moment, I think the scope of the problem is largely when MIN_INT is passed as a compile-time constant to SafeInt. We're working on an update that will resolve the problem.",
      "PostedDate": "2011-09-22T16:36:36.16-07:00",
      "Id": -2147483648
    },
    {
      "Message": "This issue should be addressed by the 3.0.17 release. Note to consumers - 3.0.17 is still considered a beta. It is strongly recommended that if you are using a compiler which aggressively optimizes that you also enable (and pay attention to) the warnings that it is removing code.",
      "PostedDate": "2011-09-23T00:14:27.357-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-09-25T15:38:25.663-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-13T18:31:03.683-08:00",
      "Id": -2147483648
    }
  ]
}