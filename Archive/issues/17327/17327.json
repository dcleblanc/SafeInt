{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "It's kind of ironic to have a Run-Time Check Failure #1 - A cast to a smaller data type has caused a loss of data.\nAm I the only one that enables __all__ runtime checks in Visual Studio?\n\nI have made the following change to fix it:\n\n```\ntemplate < typename E >\nstatic void RegMultiplyThrow( const unsigned __int64& a, const unsigned __int64& b, unsigned __int64* pRet ) SAFEINT_CPP_THROW\n{\n[...]\n        unsigned __int32 aHigh, aLow, bHigh, bLow;\n\n        static const unsigned __int64 mask = 0x00000000FFffFFff;\n\n        aHigh = (unsigned __int32)(a >> 32);\n        //aLow  = (unsigned __int32)a;\n        aLow  = (unsigned __int32)(a & mask);\n        bHigh = (unsigned __int32)(b >> 32);\n        //bLow  = (unsigned __int32)b;\n        bLow  = (unsigned __int32)(b & mask);\n\n```\n\nQuestion is: why wasn't this (or some more portable alternative) already there?",
    "LastUpdatedDate": "2015-03-13T19:18:54.603-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "SafeInt",
    "ReportedDate": "2015-01-26T07:08:30.233-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Fix Run-Time Check Failure",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 17327
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Apparently, you are the first one. I didn't immediately find the option to enable these checks in VS 2013.\r\n\r\nAs to portable, we compiled the code with clang, gcc, and the Microsoft compiler with every warning enabled that we could realistically turn on (/Wall, everything). Except to the extent that casts themselves can be implementation dependent, I believe the code above is very standards compliant.\r\n\r\nThe code is correct, complies with the C++ standard, and it is very portable (except not to processors that don't use 2's complement negative numbers, but these are very rare). \r\n\r\nI don't mind making the fix, but I'd be surprised if there is very much software that runs very long with those checks. Have you by any chance taken a look at the assembly emitted?",
      "PostedDate": "2015-03-13T19:18:54.603-07:00",
      "Id": -2147483648
    }
  ]
}