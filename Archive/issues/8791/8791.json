{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "i try to use multiply on int64_t\n \n  boost::int64_t a=2;\n  boost::int64_t b=3;\n  boost::int64_t c;\n  SafeMultiply<boost::int64_t,boost::int64_t>(a,b,c);\n \ngcc 4.3.2 and 4.4.1 takes compile time error\n \nSafeInt3.hpp: In function ‘bool SafeMultiply(T, U, T&) [with T = long int, U = long int]’:\ntest1.cpp:233:   instantiated from here\nSafeInt3.hpp:4995: error: incomplete type ‘MultiplicationHelper<long int, long int, 11>’ used in nested name specifier",
    "LastUpdatedDate": "2013-06-13T23:46:58.15-07:00",
    "PlannedForRelease": "SafeInt 3.0.13",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "SafeInt",
    "ReportedDate": "2009-09-16T04:11:58.033-07:00",
    "Status": {
      "Name": "Resolved",
      "Id": 7
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "bug gcc 4.3.2 and 4.4.1 int64_t",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 8791
  },
  "FileAttachments": [
    {
      "FileId": 2614,
      "FileName": "safe_int_gcc.patch",
      "DownloadUrl": ".\\2614"
    }
  ],
  "Comments": [
    {
      "Message": "Hi, I see this problem too. I think the issue stems from 64-bit GCC -- on my platform at least,\r\nsizeof(long) == 8\r\nsizeof(long long) == 8\r\nTo the type checker, those types aren't equivalent, even though they have the same size. But, the existing GCC code essentially assumes that long long (a.k.a __int64) is the only 64 bit type, so any Helper specialization that's 64-bit only takes __int64 directly instead of taking a type argument.\r\n\r\nI took a stab at fixing this and have a (prototype) patch, it adds template arguments to several Helper definitions so that they can be generated for long and for long long. Also included in this patch are workarounds to eliminate GCC warnings (-Wall is clean for me on gcc 4.2.4). I've only compile-tested so far, and only on GCC.\r\n\r\nDoes something like this seem workable? If so, I'd be happy to clean it up and submit it. (and separate it into 2 parts if need be)\r\n\r\nThanks,\r\nBrian Bloniarz",
      "PostedDate": "2010-01-12T16:43:15.987-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-01-12T16:43:19.847-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-01-12T16:49:16.377-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Sorry I haven't responded more quickly. The normal use of SafeMultiply is to let the compiler sort out the types by itself, so it would be:\r\n\r\n__int64 a, b, c;\r\na = x;\r\nb = y;\r\nSafeMultiply(a, b, c);\r\n\r\nYour analysis is correct - all the internal functions take __int64 directly. I can't see the patch from this (Windows) system, so I'd need to look at the changes. On a Microsoft compiler, the only way to get a 64-bit int is either long long or __int64. I don't think I'd considered long int. With my compiler, I get this:\r\n\r\n\tlong int a, b, c;\r\n\ta = 1;\r\n\tb = 2;\r\n\tSafeMultiply(a, b, c);\r\n\r\n\r\n>\tMultiplicationHelper<long,long,1>::Multiply(const long & t=1, const long & u=2, long & ret=-858993460)  Line 1576\tC++\r\n\r\nBut then if I make them long long, I get:\r\n\r\n>\tMultiplicationHelper<__int64,__int64,11>::Multiply(const __int64 & t=1, const __int64 & u=2, __int64 & ret=-3689348814741910324)  Line 2606\tC++\r\n\r\nI have no idea what the standard says about these types, and whose compiler is right, at least with respect to long int vs. long long. I'm fully aware that a long can be any length according to the standard. I have to wonder if we can get away with just not specifying the first 2 template types - looks like the code would work properly either way. For example, we have:\r\n\r\ntemplate <> class MultiplicationHelper<__int64, __int64, MultiplicationState_Int64Int64 >\r\n\r\nAnd there is exactly one that refers to MultiplicationState_Int64Int64, and I think we could just change it to:\r\n\r\ntemplate <typename T, typename U> class MultiplicationHelper<T, U, MultiplicationState_Int64Int64 >\r\n\r\nIt should still work, and we could add a compile assert that sizeof(T) == 8\r\n\r\nIs that what you did?",
      "PostedDate": "2010-01-12T20:21:18.657-08:00",
      "Id": -2147483648
    },
    {
      "Message": "That's what I did, though I didn't think to add a compile-time assert :) It took new template arguments to some of the Multiplication, Divison, Addition and Subtraction helpers to make it all work.\r\n\r\nAdditionally, LargeIntRegMultiply<> was tricky... think about:\r\ntemplate<> class LargeIntRegMultiply< unsigned __int64, unsigned __int64 >\r\nYou can't just change this to template<typename T, typename U>, the same way you can for the various Helpers, since those types are used to select which specialization you want. The way I worked around this was by\r\nchanging it to:\r\ntemplate<> class LargeIntRegMultiply< unsigned __int64, unsigned __int64 >\r\n{\r\n    template < typename T, typename U >\r\n    static bool RegMultiply( const T& a, const U& b, T& ret ) throw() ...\r\n}\r\nSo the class's template arguments identify the size of the arguments, but you can still call RegMultiply() with unsigned long arguments.\r\n\r\nAnother alternative would be to leave LargeIntRegMultiply as __int64-only, and convert from the true argument types inside MultiplicationHelper. Now that I think about it, this might be cleaner, maybe a little more invasive change though.",
      "PostedDate": "2010-01-13T06:36:01.103-08:00",
      "Id": -2147483648
    },
    {
      "Message": "The RegMultiply stuff needs to be kept to internal calls - for example, on the x64 Microsoft compiler, we can get some gains by using intrinsics that just do 128-bit math, just like we check 32-bit math with 64-bit. So I think it is OK to use the __int64 on stuff that we know is purely internal. Once we have the proper template specialization, then I think we're OK to force things to the __int64 type.",
      "PostedDate": "2010-01-13T12:19:44.063-08:00",
      "Id": -2147483648
    },
    {
      "Message": "This is now fixed by planned release 3.0.13p",
      "PostedDate": "2010-02-03T22:10:24.627-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-02-03T22:11:20.787-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-13T18:31:04.023-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T01:03:30.733-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T01:03:31.457-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-06-13T23:46:58.15-07:00",
      "Id": -2147483648
    }
  ]
}